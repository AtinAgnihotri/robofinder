{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","username","email","imgSource","className","src","alt","CardList","robots","map","user","i","Scroll","props","style","overflowY","height","children","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","response","json","users","console","log","this","searchFieldLowerCased","toLowerCase","filter","robot","nameMatch","includes","userNameMatch","emailMatch","length","getFilteredRobot","getNumberOfRobots","getLoadedState","getLoadingState","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCeCQ,EAlBF,SAAC,GAAkC,EAAhCC,GAAiC,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAE1BC,EAAY,wBAA0BF,EAAW,WAEvD,OACI,sBAAKG,UAAU,mDAAf,UACI,qBAAKC,IAAKF,EAAWG,IAAI,aAEzB,sBAAKF,UAAU,KAAf,UACI,6BACKJ,IAEL,4BAAIE,WC0BLK,EAvCE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAahB,OACI,8BASQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIZ,GAAIW,EAAKX,GACTC,KAAMU,EAAKV,KACXC,SAAUS,EAAKT,SACfC,MAAOQ,EAAKR,OAJPS,SCjBlBC,EAVA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAEZC,OAAQ,SAFpB,SAGKH,EAAMI,YCYJC,EAhBG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC/B,OACK,qBAAKhB,UAAU,MAAf,SACI,uBACIiB,KAAK,SACLrB,KAAK,GACLD,GAAG,GACHuB,YAAY,eACZlB,UAAY,mCACZmB,SAAUH,OC+DXI,E,kDAlEX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAPzC,EAAKC,MAAQ,CACTtB,OAAQ,GACRW,YAAa,IAJP,E,qDAYd,WAAqB,IAAD,OAQhBY,MAAM,8CACDvC,MAAK,SAAAwC,GAAQ,OAAIA,EAASC,UAC1BzC,MAAK,SAAA0C,GACFC,QAAQC,IAAIF,GACZ,EAAKP,SAAS,CAAEnB,OAAQ0B,S,8BAKpC,WAAoB,IAAD,EACeG,KAAKP,MAA5BtB,EADQ,EACRA,OACD8B,EAFS,EACAnB,YAC2BoB,cAC1C,OAAO/B,EAAOgC,QAAO,SAAAC,GACjB,IAAMC,EAAYD,EAAMzC,KAAKuC,cAAcI,SAASL,GAC9CM,EAAgBH,EAAMxC,SAASsC,cAAcI,SAASL,GACtDO,EAAaJ,EAAMvC,MAAMqC,cAAcI,SAASL,GACtD,OAAOI,GAAaE,GAAiBC,O,+BAI7C,WACI,OAAOR,KAAKP,MAAMtB,OAAOsC,S,6BAG7B,WACI,OAAO,oBAAI1C,UAAU,QAAd,6B,4BAGX,WACI,OACI,sBAAKA,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,wBACA,cAAC,EAAD,CAAWgB,aAAciB,KAAKZ,iBAC9B,uBACA,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjB,OAAQ6B,KAAKU,4B,oBAMvC,WACI,OAASV,KAAKW,oBAAgDX,KAAKY,iBAA9BZ,KAAKa,sB,GAlEhCC,a,MCKlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BnE,M","file":"static/js/main.682921ea.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport './Card.css'\n\n// const Card = (prop) => {\nconst Card = ({ id, name, username, email }) => {\n    // const { id, name, username, email } = prop;\n    const imgSource = \"https://robohash.org/\" + username + \"?200x200\";\n    // Just like in SwiftUI we can only return one item at the root of return\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={imgSource} alt=\"robo-img\" />\n            {/* <img src={`https://robohash.org/${prop.id}?200x200`} alt=\"robo-img\" /> This would also have worked*/}\n            <div className=\"tc\">\n                <h2>\n                    {name}\n                </h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\"\n\nconst CardList = ({ robots }) => {\n    // const cardComponents = robots.map((user, i) => {\n    //     return (\n    //         <Card \n    //             key={i} \n    //             id={user.id} \n    //             name={user.name} \n    //             username={user.username} \n    //             email={user.email} \n    //             />\n    //         );\n    // });\n\n    return (\n        <div>\n            {/* array.forEach(element => {\n                \n            }); */}\n            {/* <Card id={robots[0].id} name={robots[0].name} username={robots[0].username} email={robots[0].email}/>\n            <Card id={robots[1].id} name={robots[1].name} username={robots[1].username} email={robots[1].email}/>\n            <Card id={robots[2].id} name={robots[2].name} username={robots[2].username} email={robots[2].email}/> */}\n            {/* {cardComponents} */}\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card \n                            key={i} \n                            id={user.id} \n                            name={user.name} \n                            username={user.username} \n                            email={user.email} \n                            />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', \n                    // border: '1px solid black',\n                    height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React from \"react\";\n\n\nconst SearchBox = ({ searchField, searchChange }) => {\n   return (\n        <div className=\"pa2\">\n            <input \n                type=\"search\" \n                name=\"\" \n                id=\"\" \n                placeholder=\"Search Robot\" \n                className = \"pa3 ba b--green bg-lightest-blue\"\n                onChange={searchChange}\n            />\n       </div>\n    \n   );\n}\n\nexport default SearchBox;","import React, { Component } from \"react\";\nimport CardList from '../components/CardList';\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from '../components/SearchBox';\n\nclass App extends Component {\n    /*\n        constructor >> render >> componentDidMount >> render\n    */\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField: \"\"\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value});\n    }\n\n    componentDidMount() {\n        // let current = this;\n        // console.log(this.state.robots)\n        // setTimeout(function () {\n            \n        //     console.log(\"Robots loaded\")\n        //     current.setState({ robots: robots });\n        // }, 1000);\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(users => {\n                console.log(users);\n                this.setState({ robots: users});\n            });\n        \n    }\n\n    getFilteredRobot() {\n        const {robots, searchField} = this.state;\n        const searchFieldLowerCased = searchField.toLowerCase();\n        return robots.filter(robot => {\n            const nameMatch = robot.name.toLowerCase().includes(searchFieldLowerCased);\n            const userNameMatch = robot.username.toLowerCase().includes(searchFieldLowerCased);\n            const emailMatch = robot.email.toLowerCase().includes(searchFieldLowerCased);\n            return nameMatch || userNameMatch || emailMatch;\n        });\n    }\n\n    getNumberOfRobots() {\n        return this.state.robots.length;\n    }\n\n    getLoadingState() {\n        return <h1 className=\"f2 tc\">Loading . . .</h1>;\n    }\n\n    getLoadedState() {\n        return(\n            <div className=\"tc\">\n                <h1 className=\"f2\">Robofinder</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <hr />\n                <Scroll>\n                    <CardList robots={this.getFilteredRobot()}/>\n                </Scroll>\n            </div>  \n        );\n    }\n\n    render() {\n        return (!this.getNumberOfRobots()) ? this.getLoadingState() : this.getLoadedState();\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n// import CardList from './CardList';\nimport App from './containers/App';\nimport 'tachyons';\n// import { robots } from './robots'; // Destructure where there's no export default\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}